#!/usr/bin/env sage

from struct import pack, unpack


SIZE_DATA = 64
SIZE_POLY = 17
SIZE_STATE = 16

GFbase = GF(4294967291)


def decrypt(data, poly, state):
    for i in range(len(data) - 1, -1, -1):
        new_value = GFbase(state[-1])
        for j in range(len(state) - 1, 0, -1):
            state[j] = state[j - 1]
            new_value -= poly[j] * state[j]
        state[0] = new_value / poly[0]
        data[i] = GFbase(int(data[i]) ^^ int(state[0]))


def main():
    P.<x> = PolynomialRing(GFbase)
    with open('flag.txt.enc', 'rb') as file:
        raw_ints = file.read()
    ints = list(unpack('<' + 'I' * SIZE_DATA, raw_ints))
    recover = list(map(GFbase, ints[-2*SIZE_STATE:]))
    poly = -berlekamp_massey(recover)
    data, state = ints[:-SIZE_STATE], ints[-SIZE_STATE:]
    decrypt(data, poly, state)
    raw_text = pack('<' + 'I' * (SIZE_DATA - SIZE_STATE), *data)
    print(raw_text)


if __name__ == '__main__':
    main()
