from base64 import b64decode


def long_to_bytes(n):
    b = hex(n)[2:-1]
    b = '0' * (len(b)%2) + b
    return b.decode('hex')


def bytes_to_long(b):
    b = b.encode('hex')
    return int(b, 16)


PLEASE_INPUT = 'AAEAAEh2lz0NHGmdUwdKzW+ufC8i1xg7Nz+v/Iq03VZzFInFuUq4NYJC/yxrngGm3KM8Zopgno9Ks6NCq7l3k02bL0bVjRNQXUb5F/H946wvzb+/Mvf+XmKynia8oX2CKGl1iz94lI4PY9X3DRhZvaQAQYe/d4Qf8JEQ4F/hutbn8izBfr4+aA26GC1xtQPrKUhodVds9pInZBXOYyh72zHtExtKSm/DiOLeC0y3/mZYRY5sWeH6T7raTHsuCp6BEnGb8v4ZppEFrmhtm+K+1NsJh/mSmDNx7cqyANnimuXNfLVMzqOeqwf0FA+7cG6/+QT7fvLMAxlTKBYGWBSyUITq0H8='
FLAG = 'AAEAABA8Wg6UncrqvqtrAxh+tw/jmlof2iNL+jVYZEoQL9rOFw3jZR7IqyE0XokyCOuajpdxvu/ko/L9Iifsjq4e4VntKQLxW5lkHDMcG+tSQLAgcBVfqfMyYXdqePG4cC5gY0Le+XFj4VqdO2wQbL6xBjo8+vU6inGOLTAOPYq7UOACbKBRLcxj7ZDyp+VZ0GOtoVLca1BB0U8dxY1C+Lw7szar2Fifiv+n3c1aI4T5+AeLnNa0jPWjhj6x14zCjq1UkfZPmMNPNNrxJXIYmmHrIh+MohrEVEMFTJPr6FwFjkp53oEqTG3K646Gxy+f8KEhTcMmvalqUMWdvql85BUKABA='
CHECKING = 'AAEAADkEbUaK8WRAYFYbmlVcrbCXmgmv/HsEhYwU/UjpTNyL3A8DaT5o3NlWGt2Yw51J2qMQRw224xd9R09rMLWISyi5ktDpgsmHPQ9rW4JoIA5iX4bQm0ueNRADm3oIlHjsB8It5Uem5+mAV5YfknxJ1kCJH9oOtfkh4RLmTseMA+1HI3jaliRPP/0T9pdRFb++yUBn7XgyTFC1hBP9k/PpkhpmdhagnU7gU50gXsu8eVtqI0tDiyS1ObmqJRrkpU0x+B5+CXI29FcKfWM+Q74ez30Jv+pI7v98D8urrCKvqPInfEkEEjOqJtX/OZPjIQQ3zSlqvv2KIZobXOYtKP1RlQ0='
CORRECT = 'AAEAABwd/15PgmVB/7pTeTuD4ERUPdKFr2Ff1W++2k+8tiB6/NBZS6gBHsfFNacvXJ3ONRiIb7QrloaMoYSWw//EtjPB4EAuwcL8+czyVd8tB0NjLavG9j4wsvMD2aj4YkBcnfstNCZ+osI8LgTEh0fuJkhi/HTpNsliTWP8kyPqXTYOQSAeQlhDRjDSBigxhAOLGkJktOw3HZRlQGWs2GphzeTkIwlxCZubRx4poVKPAcYnt3+lxQfiR/MorZRrs71JcnFBLpjzTz3IRLI8djTymsJ169y/zTh56c2BSn5A2M0kuTX6PuXl8OnINu0Uod+CeSP28L4F/9Z2rWeK2kbhQCc='
BYE = 'AAEAADcZI5eSrM72yZ1133aFmZRf9giW0R2wx0ypaNXlultvZFF7r/GcLQmGClKg+H8xN5vBxrHR6lD70Qygfpq1ecif89zrVZmP0Nki9N7/4qWj100+SdZjGsQHWac4XmcsQj9tTT6W8LCMgnfx5sK6Ll+r2Sunjd1zd9RwocXjfsS0Zkh8QxcqljU3Qo5a99gnCwPhtbeaHYEHhU3vnFjHBNKHxjVkj34/zawTj8ab7JXZznndakXftITRKEHbnjQh+3TpVeuoO1jzAyJKR7l3BXXz2bfQqgVTd/AeykPr8X/p3CIRDN3ZkNbavV10JWPqm6G7I0oC4F4fYEbYpJIQyeA='

e = 3307
flag_length = 44


PLEASE_INPUT = bytes_to_long(b64decode(PLEASE_INPUT)[4:])
FLAG = bytes_to_long(b64decode(FLAG)[4:])
CHECKING = bytes_to_long(b64decode(CHECKING)[4:])
CORRECT = bytes_to_long(b64decode(CORRECT)[4:])
BYE = bytes_to_long(b64decode(BYE)[4:])


PLEASE_INPUT_PT = bytes_to_long(b'=CHECK=[*] Please, input your flag:')
CORRECT_PT = bytes_to_long(b'=CHECK=[+] Correct :)')
BYE_PT = bytes_to_long(b'=CHECK=[*] Bye!')


n = gcd(PLEASE_INPUT_PT ** e - PLEASE_INPUT, BYE_PT ** e - BYE)
n = gcd(CORRECT_PT ** e - CORRECT, n)


CHECKING_PT = bytes_to_long(b'=CHECK=[*] Checking ' + b'\x00'*44 + b' ...')
DIFF = bytes_to_long(b'=CHECK=' + b'\x00'*44 + b'\x00' * 4)
MUL = 1 << (4*8)


def polgcd(a, b): 
    while b:
        print(b.degree())
        a, b = b, a % b
    return a.monic()


P.<X> = PolynomialRing(Zmod(n))
g1 = (MUL*X + CHECKING_PT - DIFF)^e - CHECKING
g2 = X^e - FLAG
result = (-polgcd(g1, g2)).coefficients()
print(long_to_bytes(int(result[0])))
