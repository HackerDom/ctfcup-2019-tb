#!/usr/bin/python3

import re
import socket

from math import gcd
from functools import reduce
from itertools import product
from Crypto.Util.number import long_to_bytes

from task import PublicKey


def extract_numbers(line):
    matches = re.findall(rb'\d+', line)
    return list(map(int, matches))


def get_public_key(file):
    n, e, y = extract_numbers(file.readline())
    return PublicKey(n, e, y)


def get_round_params(file, c):
    file.readline()
    file.readline()
    a = extract_numbers(file.readline())[0]
    file.write((str(c) + '\n').encode())
    file.flush()
    z = extract_numbers(file.readline())[0]
    file.readline()
    file.write(b'y\n')
    file.flush()
    return a, z


def brute_gcd(n, zs, size, bits):
    for ks in product(list(range(size)), repeat=len(zs)):
        g = reduce(gcd, [z + k * n for z, k in zip(zs, ks)])
        if g.bit_length() >= bits:
            print(ks)
            return g


def main(address):
    count = 4
    size = 16
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(address)
        file = sock.makefile('rwb')
        key = get_public_key(file)
        bits = key.n.bit_length() // 2
        zs = [get_round_params(file, 1)[1] for i in range(count)]
    flag = brute_gcd(key.n, zs, size, bits)
    print(long_to_bytes(flag))


if __name__ == '__main__':
    main(('0.0.0.0', 45678))
